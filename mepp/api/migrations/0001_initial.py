
# MEPP - A web application to guide patients and clinicians in the process of
# facial palsy rehabilitation, with the help of the mirror effect and principles
# of motor learning
# Copyright (C) 2021 MEPP <info@mirroreffectplus.org>
#
# This file is part of MEPP.
#
# MEPP is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MEPP is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MEPP.  If not, see <http://www.gnu.org/licenses/>.

# Generated by Django 3.2.9 on 2021-11-03 18:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mepp.api.fields.uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('archived', models.BooleanField(default=False)),
                ('fulltext_search', models.TextField(default='')),
                ('uid', mepp.api.fields.uuid.UUIDField(uid_prefix='u')),
                ('language', models.CharField(choices=[('en', 'EN'), ('fr', 'FR')], default='en', max_length=2)),
                ('use_audio', models.BooleanField(null=True)),
                ('side', models.PositiveSmallIntegerField(choices=[(0, 'LEFT'), (1, 'RIGHT')], null=True)),
                ('clinician', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patients', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('uid', mepp.api.fields.uuid.UUIDField(uid_prefix='c')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('archived', models.BooleanField(default=False)),
                ('fulltext_search', models.TextField(default='')),
                ('is_system', models.BooleanField(default=False)),
                ('is_template', models.BooleanField(default=False)),
                ('uid', mepp.api.fields.uuid.UUIDField(uid_prefix='e')),
                ('movement_duration', models.PositiveSmallIntegerField(default=5)),
                ('repeat', models.PositiveSmallIntegerField(default=3)),
                ('pause', models.PositiveSmallIntegerField(default=5)),
                ('clinician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('uid', mepp.api.fields.uuid.UUIDField(uid_prefix='sc')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_categories', to='api.category')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TreatmentPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('archived', models.BooleanField(default=False)),
                ('fulltext_search', models.TextField(default='')),
                ('is_system', models.BooleanField(default=False)),
                ('is_template', models.BooleanField(default=False)),
                ('uid', mepp.api.fields.uuid.UUIDField(uid_prefix='tp')),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('daily_repeat', models.PositiveSmallIntegerField(default=3)),
                ('active', models.BooleanField(null=True)),
                ('clinician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinician_treatment_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['i18n__name'],
            },
        ),
        migrations.CreateModel(
            name='TreatmentPlanExerciseM2M',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('movement_duration', models.PositiveSmallIntegerField()),
                ('repeat', models.PositiveSmallIntegerField()),
                ('pause', models.PositiveSmallIntegerField()),
                ('index', models.PositiveSmallIntegerField()),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.exercise')),
                ('treatment_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.treatmentplan')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='treatmentplan',
            name='exercises',
            field=models.ManyToManyField(through='api.TreatmentPlanExerciseM2M', to='api.Exercise'),
        ),
        migrations.AddField(
            model_name='treatmentplan',
            name='patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_treatment_plans', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='treatmentplan',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='api.treatmentplan'),
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('uid', mepp.api.fields.uuid.UUIDField(uid_prefix='s')),
                ('exercises', models.JSONField()),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'COMPLETED'), (1, 'CREATED'), (2, 'IN_PROGRESS'), (3, 'PAUSED'), (4, 'SKIPPED'), (5, 'STARTED'), (6, 'UNCOMPLETED')], default=1)),
                ('active', models.BooleanField(default=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
                ('treatment_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='api.treatmentplan')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('action', models.PositiveSmallIntegerField(choices=[(0, 'DONE'), (1, 'LOGIN'), (2, 'LOGOUT'), (3, 'PAUSE'), (4, 'RESUME'), (5, 'SKIP'), (6, 'START'), (7, 'START_SESSION'), (8, 'RESTART_SESSION')], default=6)),
                ('exercise_index', models.PositiveSmallIntegerField(null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='api.session')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExpiringToken',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('expiry_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('temporary', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auth_token', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Token',
                'verbose_name_plural': 'Tokens',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='exercise',
            name='sub_categories',
            field=models.ManyToManyField(related_name='exercises', to='api.SubCategory'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='api.exercise'),
        ),
        migrations.CreateModel(
            name='TreatmentPlanI18n',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('language', models.CharField(default='en', max_length=2)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='i18n', to='api.treatmentplan')),
            ],
            options={
                'abstract': False,
                'unique_together': {('parent', 'language')},
            },
        ),
        migrations.CreateModel(
            name='SubCategoryI18n',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('language', models.CharField(default='en', max_length=2)),
                ('name', models.CharField(max_length=50)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='i18n', to='api.subcategory')),
            ],
            options={
                'abstract': False,
                'unique_together': {('parent', 'language')},
            },
        ),
        migrations.CreateModel(
            name='ExerciseI18n',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('language', models.CharField(default='en', max_length=2)),
                ('description', models.TextField()),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='i18n', to='api.exercise')),
            ],
            options={
                'abstract': False,
                'unique_together': {('parent', 'language')},
            },
        ),
        migrations.CreateModel(
            name='CategoryI18n',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('language', models.CharField(default='en', max_length=2)),
                ('name', models.CharField(max_length=50)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='i18n', to='api.category')),
            ],
            options={
                'abstract': False,
                'unique_together': {('parent', 'language')},
            },
        ),
    ]
